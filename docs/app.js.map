{"version":3,"file":"./app.js","mappings":"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","sources":["webpack://connect4/./src/utils.ts","webpack://connect4/./src/app.ts"],"sourcesContent":["export function getRandomMinMax(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\nexport function showElements(...elements) {\n    elements.forEach((el) => (el.style.display = \"inherit\"));\n}\nexport function hideElements(...elements) {\n    elements.forEach((el) => (el.style.display = \"none\"));\n}\nexport function getRanges(x, y) {\n    return {\n        VerticalBottomToTop: () => {\n            const range = [];\n            let testY = y + 0, maxRange = 3;\n            // 3 up\n            while (--testY > -1 && range.length < maxRange) {\n                range.push([x, testY]);\n            }\n            range.reverse();\n            range.push([x, y]);\n            testY = y + 0;\n            maxRange = range.length + 3;\n            // 3 down\n            while (++testY < 8 && range.length < maxRange) {\n                range.push([x, testY]);\n            }\n            return range;\n        },\n        HorizontalLeftToRight: () => {\n            const range = [];\n            let testX = x + 0, maxRange = 3;\n            // 3 left\n            while (--testX > -1 && range.length < maxRange) {\n                range.push([testX, y]);\n            }\n            range.reverse();\n            range.push([x, y]);\n            testX = x + 0;\n            maxRange = range.length + 3;\n            // 3 right\n            while (++testX < 8 && range.length < maxRange) {\n                range.push([testX, y]);\n            }\n            return range;\n        },\n        DiagonalBottomLeftToTopRight: () => {\n            const range = [];\n            let testX = x + 0, testY = y + 0, maxRange = 3;\n            // 3 left\n            while (--testX > -1 && --testY > -1 && range.length < maxRange) {\n                range.push([testX, testY]);\n            }\n            range.reverse();\n            range.push([x, y]);\n            testX = x + 0;\n            testY = y + 0;\n            maxRange = range.length + 3;\n            // 3 right\n            while (++testX < 8 && ++testY < 8 && range.length < maxRange) {\n                range.push([testX, testY]);\n            }\n            return range;\n        },\n        DiagonalTopLeftToBottomRight: () => {\n            const range = [];\n            let testX = x + 0, testY = y + 0, maxRange = 3;\n            // 3 left\n            while (--testX > -1 && ++testY < 8 && range.length < maxRange) {\n                range.push([testX, testY]);\n            }\n            range.reverse();\n            range.push([x, y]);\n            testX = x + 0;\n            testY = y + 0;\n            maxRange = range.length + 3;\n            // 3 right\n            while (++testX < 8 && --testY > -1 && range.length < maxRange) {\n                range.push([testX, testY]);\n            }\n            return range;\n        },\n    };\n}\nexport function getPossibleMatchSets(x, y) {\n    const rangeTypes = getRanges(x, y);\n    return [\n        rangeTypes.DiagonalBottomLeftToTopRight(),\n        rangeTypes.DiagonalTopLeftToBottomRight(),\n        rangeTypes.HorizontalLeftToRight(),\n        rangeTypes.VerticalBottomToTop(),\n    ]\n        .filter((points) => points.length >= 4)\n        .reduce((sets, range) => {\n        if (range.length > 4) {\n            sets.push(range.slice(0, 4));\n            sets.push(range.reverse().slice(0, 4).reverse());\n        }\n        else {\n            sets.push(range);\n        }\n        return sets;\n    }, []);\n}\nexport function wait(time, willReject = false) {\n    return new Promise((resolve, reject) => setTimeout(() => (willReject ? reject() : resolve()), time));\n}\nexport function listToArray(list) {\n    return Array.prototype.slice.call(list);\n}\nexport function getRandom(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n}\n","import { getPossibleMatchSets, getRandom, getRandomMinMax, hideElements, showElements, wait } from \"./utils\";\nimport \"./style.scss\";\nconst Players = {\n    player1: \"player1\",\n    player2: \"player2\",\n};\nconst config = {\n    dropSpeed: 300,\n    defaultState: {\n        currentPlayer: Players.player1,\n        aiPlayers: [Players.player2],\n        history: [],\n    },\n};\nObject.freeze(Players);\nObject.freeze(config);\nfunction Connect4() {\n    const app = initialize();\n    const state = Object.assign({}, config.defaultState);\n    function initialize() {\n        const getElements = (selector) => Array.from(document.querySelectorAll(selector));\n        const getElement = (selector) => getElements(selector)[0];\n        const app = {\n            board: getElement(\"#board\"),\n            blocker: getElement(\"#board .blocker\"),\n            gameOver: getElement(\"#game-over\"),\n            gameTie: getElement(\"#game-tie\"),\n            gameStart: getElement(\"#game-start\"),\n            resetBtns: getElements(\".reset-btn\"),\n            startBtn: getElement(\"#start-btn\"),\n            buttons: getElements(\"#board button\"),\n            spacesWrapper: getElements(\"#board .spaces\"),\n            turnColor: getElements(\".turn-color\"),\n            checkerTemplate: getElement(\"#template .checker\"),\n        };\n        // const resizeBoard = () => {\n        //     let h = app.board.offsetHeight;\n        //     let w = app.board.offsetWidth;\n        //     const smallestSize = Math.min(h, w);\n        //     const grid = (smallestSize - (smallestSize % 9)) / 9;\n        //     h = grid * 9;\n        //     w = grid * 8;\n        //     app.board.style.width = `${w}px`;\n        //     app.board.style.height = `${h}px`;\n        // };\n        // resizeBoard();\n        app.startBtn.onclick = start;\n        app.resetBtns.forEach((button) => (button.onclick = reset));\n        app.buttons.forEach((button, x) => (button.onclick = () => dropChecker(x)));\n        Object.freeze(app);\n        return app;\n    }\n    function start() {\n        hideElements(app.gameStart);\n        app.board.className = \"turn-\" + state.currentPlayer;\n    }\n    function reset() {\n        const oldCheckers = Array.from(document.getElementsByClassName(\"checker\"));\n        oldCheckers.forEach((c) => (c.style.top = window.outerHeight + window.outerHeight / 2 + \"px\"));\n        wait(1000).then(() => oldCheckers.forEach((c) => c.remove()));\n        updateState(config.defaultState);\n        app.board.className = \"turn-\" + state.currentPlayer;\n        hideElements(app.gameOver);\n        hideElements(app.gameTie);\n    }\n    function getPlayer(x, y) {\n        return (state.history.find((p) => p.x === x && p.y === y) || {}).player;\n    }\n    function setChecker(x, y, player) {\n        updateState({\n            history: [...state.history, { x, y, player }],\n        });\n    }\n    function updateState(update) {\n        return Object.assign(state, update);\n    }\n    function checkForWin(x, y) {\n        const sets = getPossibleMatchSets(x, y);\n        return sets.some((set) => set.every((pos) => getPlayer(...pos) === state.currentPlayer));\n        return false;\n    }\n    function checkForTie() {\n        return state.history.length === 64;\n    }\n    function dropChecker(x) {\n        showElements(app.blocker);\n        const y = getAvailableY(x);\n        if (y < 0)\n            return;\n        return animateChecker(x, y).then(() => {\n            setChecker(x, y, state.currentPlayer);\n            hideElements(app.blocker);\n            if (checkForWin(x, y)) {\n                return wait(250).then(() => showElements(app.gameOver));\n            }\n            if (checkForTie()) {\n                return wait(250).then(() => showElements(app.gameTie));\n            }\n            toggleTurn();\n            if (state.aiPlayers.includes(state.currentPlayer)) {\n                return aiMove();\n            }\n            return Promise.resolve();\n        });\n    }\n    function animateChecker(x, y) {\n        y = Math.abs(y - 7) + 1;\n        const ms = (config.dropSpeed / 4) * y;\n        const clone = app.checkerTemplate.cloneNode(true);\n        app.board.appendChild(clone);\n        const o = app.board.lastChild;\n        o.style.transform = \"rotate(\" + getRandom(1, 360) + \"deg)\";\n        o.classList.add(state.currentPlayer);\n        setTimeout(() => {\n            o.style.transition = \"\";\n        }, ms + 100);\n        o.style.transition = `top ${ms}ms linear`;\n        o.style.left = x * 9 + \"vmin\";\n        o.style.display = \"\";\n        return wait(50).then(() => {\n            o.style.top = y * 9 + \"vmin\";\n            return wait(ms + 300);\n        });\n    }\n    function getAvailableY(x) {\n        for (let y = 0; y < 8; y++) {\n            if (!getPlayer(x, y))\n                return y;\n        }\n        return -1;\n    }\n    function aiMove() {\n        const lastPos = state.history[state.history.length - 1];\n        const sortFilterSets = (matchSets, player) => matchSets\n            .map((set) => ({\n            matches: set.filter((pos) => getPlayer(...pos) === player).length,\n            moves: set.filter((pos) => getAvailableY(pos[0]) === pos[1]),\n        }))\n            .filter((moveSets) => moveSets.moves.length > 0)\n            .sort((a, b) => {\n            if (a.matches === b.matches) {\n                if (a.moves > b.moves)\n                    return -1;\n                if (a.moves < b.moves)\n                    return 1;\n                return 0;\n            }\n            if (a.matches > b.matches)\n                return -1;\n            if (a.matches < b.matches)\n                return 1;\n            return 0;\n        });\n        const possibleMatchSets = state.history.length ? getPossibleMatchSets(lastPos.x, lastPos.y) : [];\n        let x = null;\n        const offensiveMovesSets = sortFilterSets(possibleMatchSets, state.currentPlayer);\n        // TODO: check for easy 3 matches and\n        // looks for any oponent matches and makes blocking move recomendations\n        const defensiveMovesSets = sortFilterSets(possibleMatchSets, lastPos.player);\n        if (defensiveMovesSets.length) {\n            // defensive\n            defensiveMovesSets.some((defensiveMovesSet) => {\n                let defensiveMove = defensiveMovesSet.moves[0];\n                // check if defensiveMove has a follow up win\n                // check if next y exists if it doesn't don't wory about it\n                if (defensiveMove[1] === 7) {\n                    x = defensiveMove[0];\n                    return true;\n                }\n                // check if the next y move has 3 in a row\n                const predictiveMove = [defensiveMove[0], defensiveMove[1] + 1];\n                const predictiveMatchSets = getPossibleMatchSets(predictiveMove[0], predictiveMove[1])\n                    .map((set) => ({\n                    matches: set.filter((pos) => getPlayer(...pos) === lastPos.player).length,\n                }))\n                    .sort((a, b) => {\n                    if (a.matches > b.matches)\n                        return -1;\n                    if (a.matches < b.matches)\n                        return 1;\n                    return 0;\n                });\n                if (predictiveMatchSets.every((predictiveMatchSet) => predictiveMatchSet.matches < 3)) {\n                    x = defensiveMove[0];\n                    return true;\n                }\n            });\n        }\n        if (!x) {\n            x = getRandomMinMax(0, 7);\n            while (getAvailableY(x) === -1) {\n                if (++x > 7)\n                    x = 0;\n            }\n        }\n        return dropChecker(x);\n    }\n    function toggleTurn() {\n        const currentPlayer = state.currentPlayer === Players.player1 ? Players.player2 : Players.player1;\n        updateState({ currentPlayer });\n        const currentPlayerName = currentPlayer[0].toUpperCase() + currentPlayer.substr(1);\n        app.board.className = \"turn-\" + currentPlayer;\n        app.turnColor.forEach((el) => (el.innerText = currentPlayerName));\n        return Promise.resolve();\n    }\n}\nConnect4();\n"],"names":["showElements","elements","forEach","el","style","display","hideElements","getPossibleMatchSets","x","y","rangeTypes","VerticalBottomToTop","range","testY","maxRange","length","push","reverse","HorizontalLeftToRight","testX","DiagonalBottomLeftToTopRight","DiagonalTopLeftToBottomRight","getRanges","filter","points","reduce","sets","slice","wait","time","willReject","Promise","resolve","reject","setTimeout","Players","player1","player2","config","dropSpeed","defaultState","currentPlayer","aiPlayers","history","Object","freeze","app","getElements","selector","Array","from","document","querySelectorAll","getElement","board","blocker","gameOver","gameTie","gameStart","resetBtns","startBtn","buttons","spacesWrapper","turnColor","checkerTemplate","onclick","start","button","reset","dropChecker","initialize","state","assign","className","oldCheckers","getElementsByClassName","c","top","window","outerHeight","then","remove","updateState","getPlayer","find","p","player","update","getAvailableY","Math","abs","ms","clone","cloneNode","appendChild","o","lastChild","transform","min","max","ceil","floor","random","classList","add","transition","left","animateChecker","setChecker","some","set","every","pos","checkForWin","currentPlayerName","toUpperCase","substr","innerText","toggleTurn","includes","lastPos","sortFilterSets","matchSets","map","matches","moves","moveSets","sort","a","b","possibleMatchSets","defensiveMovesSets","defensiveMovesSet","defensiveMove","predictiveMove","predictiveMatchSet","aiMove","Connect4"],"sourceRoot":""}