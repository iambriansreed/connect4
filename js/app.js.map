{"version":3,"file":"./js/app.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;ACAO;AACP;AACA;AACA,0DAA0D;AAC1D;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;;;;;;;UCnHA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN6G;AACvF;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,EAAE;AAC5C,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAY;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAI;AACZ;AACA;AACA,QAAQ,oDAAY;AACpB,QAAQ,oDAAY;AACpB;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA,0CAA0C,cAAc;AACxD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAY;AACpB;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAY;AACxB;AACA,uBAAuB,4CAAI,iBAAiB,oDAAY;AACxD;AACA;AACA,uBAAuB,4CAAI,iBAAiB,oDAAY;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iDAAS;AACjD;AACA;AACA;AACA,SAAS;AACT,oCAAoC,GAAG;AACvC;AACA;AACA,eAAe,4CAAI;AACnB;AACA,mBAAmB,4CAAI;AACvB,SAAS;AACT;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yDAAyD,4DAAoB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,4DAAoB;AAChE;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://connect4/./src/style.scss","webpack://connect4/./src/utils.ts","webpack://connect4/webpack/bootstrap","webpack://connect4/webpack/runtime/define property getters","webpack://connect4/webpack/runtime/hasOwnProperty shorthand","webpack://connect4/webpack/runtime/make namespace object","webpack://connect4/./src/app.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","export function getRandomMinMax(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\nexport function showElements(...elements) {\n    elements.forEach((el) => (el.style.display = \"inherit\"));\n}\nexport function hideElements(...elements) {\n    elements.forEach((el) => (el.style.display = \"none\"));\n}\nexport function getRanges(x, y) {\n    return {\n        VerticalBottomToTop: () => {\n            const range = [];\n            let testY = y + 0, maxRange = 3;\n            // 3 up\n            while (--testY > -1 && range.length < maxRange) {\n                range.push([x, testY]);\n            }\n            range.reverse();\n            range.push([x, y]);\n            testY = y + 0;\n            maxRange = range.length + 3;\n            // 3 down\n            while (++testY < 8 && range.length < maxRange) {\n                range.push([x, testY]);\n            }\n            return range;\n        },\n        HorizontalLeftToRight: () => {\n            const range = [];\n            let testX = x + 0, maxRange = 3;\n            // 3 left\n            while (--testX > -1 && range.length < maxRange) {\n                range.push([testX, y]);\n            }\n            range.reverse();\n            range.push([x, y]);\n            testX = x + 0;\n            maxRange = range.length + 3;\n            // 3 right\n            while (++testX < 8 && range.length < maxRange) {\n                range.push([testX, y]);\n            }\n            return range;\n        },\n        DiagonalBottomLeftToTopRight: () => {\n            const range = [];\n            let testX = x + 0, testY = y + 0, maxRange = 3;\n            // 3 left\n            while (--testX > -1 && --testY > -1 && range.length < maxRange) {\n                range.push([testX, testY]);\n            }\n            range.reverse();\n            range.push([x, y]);\n            testX = x + 0;\n            testY = y + 0;\n            maxRange = range.length + 3;\n            // 3 right\n            while (++testX < 8 && ++testY < 8 && range.length < maxRange) {\n                range.push([testX, testY]);\n            }\n            return range;\n        },\n        DiagonalTopLeftToBottomRight: () => {\n            const range = [];\n            let testX = x + 0, testY = y + 0, maxRange = 3;\n            // 3 left\n            while (--testX > -1 && ++testY < 8 && range.length < maxRange) {\n                range.push([testX, testY]);\n            }\n            range.reverse();\n            range.push([x, y]);\n            testX = x + 0;\n            testY = y + 0;\n            maxRange = range.length + 3;\n            // 3 right\n            while (++testX < 8 && --testY > -1 && range.length < maxRange) {\n                range.push([testX, testY]);\n            }\n            return range;\n        },\n    };\n}\nexport function getPossibleMatchSets(x, y) {\n    const rangeTypes = getRanges(x, y);\n    return [\n        rangeTypes.DiagonalBottomLeftToTopRight(),\n        rangeTypes.DiagonalTopLeftToBottomRight(),\n        rangeTypes.HorizontalLeftToRight(),\n        rangeTypes.VerticalBottomToTop(),\n    ]\n        .filter((points) => points.length >= 4)\n        .reduce((sets, range) => {\n        if (range.length > 4) {\n            sets.push(range.slice(0, 4));\n            sets.push(range.reverse().slice(0, 4).reverse());\n        }\n        else {\n            sets.push(range);\n        }\n        return sets;\n    }, []);\n}\nexport function wait(time, willReject = false) {\n    return new Promise((resolve, reject) => setTimeout(() => (willReject ? reject() : resolve()), time));\n}\nexport function listToArray(list) {\n    return Array.prototype.slice.call(list);\n}\nexport function getRandom(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { getPossibleMatchSets, getRandom, getRandomMinMax, hideElements, showElements, wait } from \"./utils\";\nimport \"./style.scss\";\nconst Players = {\n    player1: \"player1\",\n    player2: \"player2\",\n};\nconst config = {\n    dropSpeed: 300,\n    defaultState: {\n        currentPlayer: Players.player1,\n        aiPlayers: [Players.player2],\n        history: [],\n    },\n};\nObject.freeze(Players);\nObject.freeze(config);\nfunction Connect4() {\n    const app = initialize();\n    const state = Object.assign({}, config.defaultState);\n    function initialize() {\n        const getElements = (selector) => Array.from(document.querySelectorAll(selector));\n        const getElement = (selector) => getElements(selector)[0];\n        const app = {\n            board: getElement(\"#board\"),\n            blocker: getElement(\"#board .blocker\"),\n            gameOver: getElement(\"#game-over\"),\n            gameTie: getElement(\"#game-tie\"),\n            gameStart: getElement(\"#game-start\"),\n            resetBtns: getElements(\".reset-btn\"),\n            startBtn: getElement(\"#start-btn\"),\n            buttons: getElements(\"#board button\"),\n            spacesWrapper: getElements(\"#board .spaces\"),\n            turnColor: getElements(\".turn-color\"),\n            checkerTemplate: getElement(\"#template .checker\"),\n        };\n        // const resizeBoard = () => {\n        //     let h = app.board.offsetHeight;\n        //     let w = app.board.offsetWidth;\n        //     const smallestSize = Math.min(h, w);\n        //     const grid = (smallestSize - (smallestSize % 9)) / 9;\n        //     h = grid * 9;\n        //     w = grid * 8;\n        //     app.board.style.width = `${w}px`;\n        //     app.board.style.height = `${h}px`;\n        // };\n        // resizeBoard();\n        app.startBtn.onclick = start;\n        app.resetBtns.forEach((button) => (button.onclick = reset));\n        app.buttons.forEach((button, x) => (button.onclick = () => dropChecker(x)));\n        Object.freeze(app);\n        return app;\n    }\n    function start() {\n        hideElements(app.gameStart);\n        app.board.className = \"turn-\" + state.currentPlayer;\n    }\n    function reset() {\n        const oldCheckers = Array.from(document.getElementsByClassName(\"checker\"));\n        oldCheckers.forEach((c) => (c.style.top = window.outerHeight + window.outerHeight / 2 + \"px\"));\n        wait(1000).then(() => oldCheckers.forEach((c) => c.remove()));\n        updateState(config.defaultState);\n        app.board.className = \"turn-\" + state.currentPlayer;\n        hideElements(app.gameOver);\n        hideElements(app.gameTie);\n    }\n    function getPlayer(x, y) {\n        return (state.history.find((p) => p.x === x && p.y === y) || {}).player;\n    }\n    function setChecker(x, y, player) {\n        updateState({\n            history: [...state.history, { x, y, player }],\n        });\n    }\n    function updateState(update) {\n        return Object.assign(state, update);\n    }\n    function checkForWin(x, y) {\n        const sets = getPossibleMatchSets(x, y);\n        return sets.some((set) => set.every((pos) => getPlayer(...pos) === state.currentPlayer));\n        return false;\n    }\n    function checkForTie() {\n        return state.history.length === 64;\n    }\n    function dropChecker(x) {\n        showElements(app.blocker);\n        const y = getAvailableY(x);\n        if (y < 0)\n            return;\n        return animateChecker(x, y).then(() => {\n            setChecker(x, y, state.currentPlayer);\n            hideElements(app.blocker);\n            if (checkForWin(x, y)) {\n                return wait(250).then(() => showElements(app.gameOver));\n            }\n            if (checkForTie()) {\n                return wait(250).then(() => showElements(app.gameTie));\n            }\n            toggleTurn();\n            if (state.aiPlayers.includes(state.currentPlayer)) {\n                return aiMove();\n            }\n            return Promise.resolve();\n        });\n    }\n    function animateChecker(x, y) {\n        y = Math.abs(y - 7) + 1;\n        const ms = (config.dropSpeed / 4) * y;\n        const clone = app.checkerTemplate.cloneNode(true);\n        app.board.appendChild(clone);\n        const o = app.board.lastChild;\n        o.style.transform = \"rotate(\" + getRandom(1, 360) + \"deg)\";\n        o.classList.add(state.currentPlayer);\n        setTimeout(() => {\n            o.style.transition = \"\";\n        }, ms + 100);\n        o.style.transition = `top ${ms}ms linear`;\n        o.style.left = x * 9 + \"vmin\";\n        o.style.display = \"\";\n        return wait(50).then(() => {\n            o.style.top = y * 9 + \"vmin\";\n            return wait(ms + 300);\n        });\n    }\n    function getAvailableY(x) {\n        for (let y = 0; y < 8; y++) {\n            if (!getPlayer(x, y))\n                return y;\n        }\n        return -1;\n    }\n    function aiMove() {\n        const lastPos = state.history[state.history.length - 1];\n        const sortFilterSets = (matchSets, player) => matchSets\n            .map((set) => ({\n            matches: set.filter((pos) => getPlayer(...pos) === player).length,\n            moves: set.filter((pos) => getAvailableY(pos[0]) === pos[1]),\n        }))\n            .filter((moveSets) => moveSets.moves.length > 0)\n            .sort((a, b) => {\n            if (a.matches === b.matches) {\n                if (a.moves > b.moves)\n                    return -1;\n                if (a.moves < b.moves)\n                    return 1;\n                return 0;\n            }\n            if (a.matches > b.matches)\n                return -1;\n            if (a.matches < b.matches)\n                return 1;\n            return 0;\n        });\n        const possibleMatchSets = state.history.length ? getPossibleMatchSets(lastPos.x, lastPos.y) : [];\n        let x = null;\n        const offensiveMovesSets = sortFilterSets(possibleMatchSets, state.currentPlayer);\n        // TODO: check for easy 3 matches and\n        // looks for any oponent matches and makes blocking move recomendations\n        const defensiveMovesSets = sortFilterSets(possibleMatchSets, lastPos.player);\n        if (defensiveMovesSets.length) {\n            // defensive\n            defensiveMovesSets.some((defensiveMovesSet) => {\n                let defensiveMove = defensiveMovesSet.moves[0];\n                // check if defensiveMove has a follow up win\n                // check if next y exists if it doesn't don't wory about it\n                if (defensiveMove[1] === 7) {\n                    x = defensiveMove[0];\n                    return true;\n                }\n                // check if the next y move has 3 in a row\n                const predictiveMove = [defensiveMove[0], defensiveMove[1] + 1];\n                const predictiveMatchSets = getPossibleMatchSets(predictiveMove[0], predictiveMove[1])\n                    .map((set) => ({\n                    matches: set.filter((pos) => getPlayer(...pos) === lastPos.player).length,\n                }))\n                    .sort((a, b) => {\n                    if (a.matches > b.matches)\n                        return -1;\n                    if (a.matches < b.matches)\n                        return 1;\n                    return 0;\n                });\n                if (predictiveMatchSets.every((predictiveMatchSet) => predictiveMatchSet.matches < 3)) {\n                    x = defensiveMove[0];\n                    return true;\n                }\n            });\n        }\n        if (!x) {\n            x = getRandomMinMax(0, 7);\n            while (getAvailableY(x) === -1) {\n                if (++x > 7)\n                    x = 0;\n            }\n        }\n        return dropChecker(x);\n    }\n    function toggleTurn() {\n        const currentPlayer = state.currentPlayer === Players.player1 ? Players.player2 : Players.player1;\n        updateState({ currentPlayer });\n        const currentPlayerName = currentPlayer[0].toUpperCase() + currentPlayer.substr(1);\n        app.board.className = \"turn-\" + currentPlayer;\n        app.turnColor.forEach((el) => (el.innerText = currentPlayerName));\n        return Promise.resolve();\n    }\n}\nConnect4();\n"],"names":[],"sourceRoot":""}